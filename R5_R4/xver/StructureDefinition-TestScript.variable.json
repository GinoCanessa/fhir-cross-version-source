{
  "resourceType": "StructureDefinition",
  "id": "TestScript.variable",
  "url": "http://hl7.org/fhir/5.0/StructureDefinition/extension-TestScript.variable",
  "name": "XVerExtensionTestScript.variable",
  "title": "Cross-Version Extension for FHIR R5:TestScript.variable compared to FHIR R4",
  "status": "draft",
  "experimental": true,
  "description": "R5 `TestScript.variable` maps as Equivalent to R4 `TestScript.variable`",
  "fhirVersion": "5.0.0",
  "kind": "complex-type",
  "abstract": false,
  "context": [
    {
      "type": "element",
      "expression": "TestScript.variable"
    }
  ],
  "type": "Extension",
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/Extension",
  "derivation": "constraint",
  "snapshot": {
    "element": [
      {
        "id": "Extension",
        "extension": [
          {
            "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status",
            "valueCode": "normative"
          },
          {
            "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-normative-version",
            "valueCode": "4.0.0"
          }
        ],
        "path": "Extension",
        "short": "Placeholder for evaluated elements",
        "definition": "Variable is set based either on element value in response body or on header field value in the response headers.",
        "comment": "R5 `TestScript.variable` maps as Equivalent to R4 `TestScript.variable`\nVariables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations. This limits the places that test engines would need to look for placeholders \"${}\".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations.  See example testscript-search.xml.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension",
          "min": 0,
          "max": "*"
        },
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a,N/A"
          }
        ]
      },
      {
        "id": "Extension.id",
        "path": "Extension.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "Unique id for inter-element referencing",
        "definition": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Element.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "id"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "condition": [
          "ele-1"
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "Extension.extension",
        "path": "Extension.extension",
        "slicing": {
          "discriminator": [
            {
              "type": "value",
              "path": "url"
            }
          ],
          "description": "Extensions are always sliced by (at least) url",
          "rules": "open"
        },
        "short": "Additional content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "Element.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "Extension.url",
        "path": "Extension.url",
        "representation": [
          "xmlAttr"
        ],
        "short": "identifies the meaning of the extension",
        "definition": "Source of the definition for the extension code - a logical name or a URL.",
        "comment": "The definition may point directly to a computable or human-readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition SHALL be a URI for the Structure Definition defining the extension.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.url",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "uri"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "fixedUri": "http://hl7.org/fhir/5.0/StructureDefinition/extension-TestScript.variable",
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "id": "Extension.value[x]",
        "path": "Extension.value[x]",
        "short": "Value of extension",
        "definition": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.value[x]",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "base64Binary"
          },
          {
            "code": "boolean"
          },
          {
            "code": "canonical"
          },
          {
            "code": "code"
          },
          {
            "code": "date"
          },
          {
            "code": "dateTime"
          },
          {
            "code": "decimal"
          },
          {
            "code": "id"
          },
          {
            "code": "instant"
          },
          {
            "code": "integer"
          },
          {
            "code": "integer64"
          },
          {
            "code": "markdown"
          },
          {
            "code": "oid"
          },
          {
            "code": "positiveInt"
          },
          {
            "code": "string"
          },
          {
            "code": "time"
          },
          {
            "code": "unsignedInt"
          },
          {
            "code": "uri"
          },
          {
            "code": "url"
          },
          {
            "code": "uuid"
          },
          {
            "code": "Address"
          },
          {
            "code": "Age"
          },
          {
            "code": "Annotation"
          },
          {
            "code": "Attachment"
          },
          {
            "code": "CodeableConcept"
          },
          {
            "code": "CodeableReference"
          },
          {
            "code": "Coding"
          },
          {
            "code": "ContactPoint"
          },
          {
            "code": "Count"
          },
          {
            "code": "Distance"
          },
          {
            "code": "Duration"
          },
          {
            "code": "HumanName"
          },
          {
            "code": "Identifier"
          },
          {
            "code": "Money"
          },
          {
            "code": "Period"
          },
          {
            "code": "Quantity"
          },
          {
            "code": "Range"
          },
          {
            "code": "Ratio"
          },
          {
            "code": "RatioRange"
          },
          {
            "code": "Reference"
          },
          {
            "code": "SampledData"
          },
          {
            "code": "Signature"
          },
          {
            "code": "Timing"
          },
          {
            "code": "ContactDetail"
          },
          {
            "code": "DataRequirement"
          },
          {
            "code": "Expression"
          },
          {
            "code": "ParameterDefinition"
          },
          {
            "code": "RelatedArtifact"
          },
          {
            "code": "TriggerDefinition"
          },
          {
            "code": "UsageContext"
          },
          {
            "code": "Availability"
          },
          {
            "code": "ExtendedContactDetail"
          },
          {
            "code": "Dosage"
          },
          {
            "code": "Meta"
          }
        ],
        "condition": [
          "ext-1"
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "id": "Extension.extension:name",
        "path": "Extension.extension:name",
        "short": "Descriptive name for this variable",
        "definition": "Placeholders would contain the variable name wrapped in ${} in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:name",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:defaultValue",
        "path": "Extension.extension:defaultValue",
        "short": "Default, hard-coded, or user-defined value for this variable",
        "definition": "A default, hard-coded, or user-defined value for this variable.",
        "comment": "The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:defaultValue",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:description",
        "path": "Extension.extension:description",
        "short": "Natural language description of the variable",
        "definition": "A free text natural language description of the variable and its purpose.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:description",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:expression",
        "path": "Extension.extension:expression",
        "short": "The FHIRPath expression against the fixture body",
        "definition": "The FHIRPath expression for a specific value to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.",
        "comment": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:expression",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:headerField",
        "path": "Extension.extension:headerField",
        "short": "HTTP header field name for source",
        "definition": "Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.",
        "comment": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:headerField",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:hint",
        "path": "Extension.extension:hint",
        "short": "Hint help text for default value to enter",
        "definition": "Displayable text string with hint help information to the user when entering a default value.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:hint",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:path",
        "path": "Extension.extension:path",
        "short": "XPath or JSONPath against the fixture body",
        "definition": "XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.",
        "comment": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:path",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:sourceId",
        "path": "Extension.extension:sourceId",
        "short": "Fixture Id of source expression or headerField within this variable",
        "definition": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.",
        "comment": "This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:sourceId",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      }
    ]
  },
  "differential": {
    "element": [
      {
        "path": "Extension",
        "short": "Placeholder for evaluated elements",
        "definition": "Variable is set based either on element value in response body or on header field value in the response headers.",
        "comment": "R5 `TestScript.variable` maps as Equivalent to R4 `TestScript.variable`\nVariables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations. This limits the places that test engines would need to look for placeholders \"${}\".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations.  See example testscript-search.xml.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:name",
        "short": "Descriptive name for this variable",
        "definition": "Placeholders would contain the variable name wrapped in ${} in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:defaultValue",
        "short": "Default, hard-coded, or user-defined value for this variable",
        "definition": "A default, hard-coded, or user-defined value for this variable.",
        "comment": "The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:defaultValue.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:defaultValue.url",
        "fixedUri": "defaultValue"
      },
      {
        "path": "Extension.extension:description",
        "short": "Natural language description of the variable",
        "definition": "A free text natural language description of the variable and its purpose.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:description.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:description.url",
        "fixedUri": "description"
      },
      {
        "path": "Extension.extension:expression",
        "short": "The FHIRPath expression against the fixture body",
        "definition": "The FHIRPath expression for a specific value to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.",
        "comment": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:expression.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:expression.url",
        "fixedUri": "expression"
      },
      {
        "path": "Extension.extension:headerField",
        "short": "HTTP header field name for source",
        "definition": "Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.",
        "comment": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:headerField.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:headerField.url",
        "fixedUri": "headerField"
      },
      {
        "path": "Extension.extension:hint",
        "short": "Hint help text for default value to enter",
        "definition": "Displayable text string with hint help information to the user when entering a default value.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:hint.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:hint.url",
        "fixedUri": "hint"
      },
      {
        "path": "Extension.extension:path",
        "short": "XPath or JSONPath against the fixture body",
        "definition": "XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.",
        "comment": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:path.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:path.url",
        "fixedUri": "path"
      },
      {
        "path": "Extension.extension:sourceId",
        "short": "Fixture Id of source expression or headerField within this variable",
        "definition": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.",
        "comment": "This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:sourceId.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:sourceId.url",
        "fixedUri": "sourceId"
      },
      {
        "path": "Extension.url",
        "fixedUri": "http://hl7.org/fhir/5.0/StructureDefinition/extension-TestScript.variable"
      }
    ]
  }
}