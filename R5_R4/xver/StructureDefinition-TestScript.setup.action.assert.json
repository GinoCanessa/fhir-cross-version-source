{
  "resourceType": "StructureDefinition",
  "id": "TestScript.setup.action.assert",
  "url": "http://hl7.org/fhir/5.0/StructureDefinition/extension-TestScript.setup.action.assert",
  "name": "XVerExtensionTestScript.setup.action.assert",
  "title": "Cross-Version Extension for FHIR R5:TestScript.setup.action.assert compared to FHIR R4",
  "status": "draft",
  "experimental": true,
  "description": "R5 `TestScript.setup.action.assert` maps as Equivalent to R4 `TestScript.setup.action.assert`",
  "fhirVersion": "5.0.0",
  "kind": "complex-type",
  "abstract": false,
  "context": [
    {
      "type": "element",
      "expression": "TestScript.setup.action.assert"
    }
  ],
  "type": "Extension",
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/Extension",
  "derivation": "constraint",
  "snapshot": {
    "element": [
      {
        "id": "Extension",
        "extension": [
          {
            "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status",
            "valueCode": "normative"
          },
          {
            "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-normative-version",
            "valueCode": "4.0.0"
          }
        ],
        "path": "Extension",
        "short": "The assertion to perform",
        "definition": "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
        "comment": "R5 `TestScript.setup.action.assert` maps as Equivalent to R4 `TestScript.setup.action.assert`\nIn order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension",
          "min": 0,
          "max": "*"
        },
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a,N/A"
          }
        ]
      },
      {
        "id": "Extension.id",
        "path": "Extension.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "Unique id for inter-element referencing",
        "definition": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Element.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "id"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "condition": [
          "ele-1"
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "Extension.extension",
        "path": "Extension.extension",
        "slicing": {
          "discriminator": [
            {
              "type": "value",
              "path": "url"
            }
          ],
          "description": "Extensions are always sliced by (at least) url",
          "rules": "open"
        },
        "short": "Additional content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "Element.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "Extension.url",
        "path": "Extension.url",
        "representation": [
          "xmlAttr"
        ],
        "short": "identifies the meaning of the extension",
        "definition": "Source of the definition for the extension code - a logical name or a URL.",
        "comment": "The definition may point directly to a computable or human-readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition SHALL be a URI for the Structure Definition defining the extension.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.url",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "uri"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "fixedUri": "http://hl7.org/fhir/5.0/StructureDefinition/extension-TestScript.setup.action.assert",
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "id": "Extension.value[x]",
        "path": "Extension.value[x]",
        "short": "Value of extension",
        "definition": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.value[x]",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "base64Binary"
          },
          {
            "code": "boolean"
          },
          {
            "code": "canonical"
          },
          {
            "code": "code"
          },
          {
            "code": "date"
          },
          {
            "code": "dateTime"
          },
          {
            "code": "decimal"
          },
          {
            "code": "id"
          },
          {
            "code": "instant"
          },
          {
            "code": "integer"
          },
          {
            "code": "integer64"
          },
          {
            "code": "markdown"
          },
          {
            "code": "oid"
          },
          {
            "code": "positiveInt"
          },
          {
            "code": "string"
          },
          {
            "code": "time"
          },
          {
            "code": "unsignedInt"
          },
          {
            "code": "uri"
          },
          {
            "code": "url"
          },
          {
            "code": "uuid"
          },
          {
            "code": "Address"
          },
          {
            "code": "Age"
          },
          {
            "code": "Annotation"
          },
          {
            "code": "Attachment"
          },
          {
            "code": "CodeableConcept"
          },
          {
            "code": "CodeableReference"
          },
          {
            "code": "Coding"
          },
          {
            "code": "ContactPoint"
          },
          {
            "code": "Count"
          },
          {
            "code": "Distance"
          },
          {
            "code": "Duration"
          },
          {
            "code": "HumanName"
          },
          {
            "code": "Identifier"
          },
          {
            "code": "Money"
          },
          {
            "code": "Period"
          },
          {
            "code": "Quantity"
          },
          {
            "code": "Range"
          },
          {
            "code": "Ratio"
          },
          {
            "code": "RatioRange"
          },
          {
            "code": "Reference"
          },
          {
            "code": "SampledData"
          },
          {
            "code": "Signature"
          },
          {
            "code": "Timing"
          },
          {
            "code": "ContactDetail"
          },
          {
            "code": "DataRequirement"
          },
          {
            "code": "Expression"
          },
          {
            "code": "ParameterDefinition"
          },
          {
            "code": "RelatedArtifact"
          },
          {
            "code": "TriggerDefinition"
          },
          {
            "code": "UsageContext"
          },
          {
            "code": "Availability"
          },
          {
            "code": "ExtendedContactDetail"
          },
          {
            "code": "Dosage"
          },
          {
            "code": "Meta"
          }
        ],
        "condition": [
          "ext-1"
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "id": "Extension.extension:label",
        "path": "Extension.extension:label",
        "short": "Tracking/logging assertion label",
        "definition": "The label would be used for tracking/logging purposes by test engines.",
        "comment": "This has no impact on the verification itself.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:label",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:description",
        "path": "Extension.extension:description",
        "short": "Tracking/reporting assertion description",
        "definition": "The description would be used by test engines for tracking and reporting purposes.",
        "comment": "This has no impact on the verification itself.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:description",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:direction",
        "path": "Extension.extension:direction",
        "short": "response | request",
        "definition": "The direction to use for the assertion.",
        "comment": "If the direction is specified as \"response\" (the default), then the processing of this assert is against the received response message. If the direction is specified as \"request\", then the processing of this assert is against the sent request message.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:direction",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:compareToSourceId",
        "path": "Extension.extension:compareToSourceId",
        "short": "Id of the source fixture to be evaluated",
        "definition": "Id of the source fixture used as the contents to be evaluated by either the \"source/expression\" or \"sourceId/path\" definition.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:compareToSourceId",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:compareToSourceExpression",
        "path": "Extension.extension:compareToSourceExpression",
        "short": "The FHIRPath expression to evaluate against the source fixture",
        "definition": "The FHIRPath expression for a specific value to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.",
        "comment": "Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:compareToSourceExpression",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:compareToSourcePath",
        "path": "Extension.extension:compareToSourcePath",
        "short": "XPath or JSONPath expression to evaluate against the source fixture",
        "definition": "XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.",
        "comment": "The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:compareToSourcePath",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:contentType",
        "path": "Extension.extension:contentType",
        "short": "Mime type to compare against the 'Content-Type' header",
        "definition": "The mime-type contents to compare against the request or response message 'Content-Type' header.",
        "comment": "If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If \"assert.sourceId\" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).  If you'd like to have more control over the string, then use 'assert.headerField' instead.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:contentType",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:defaultManualCompletion",
        "path": "Extension.extension:defaultManualCompletion",
        "short": "fail | pass | skip | stop",
        "definition": "The default manual completion outcome applied to this assertion.",
        "comment": "Manual completion is used to pause the test engine execution and evaluation allowing an external review of the defined assert condition. The defaultManualCompletion defines the default manual completion outcome applied if one of the enumerated values is not applied.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:defaultManualCompletion",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:expression",
        "path": "Extension.extension:expression",
        "short": "The FHIRPath expression to be evaluated",
        "definition": "The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.",
        "comment": "If both \"expression\" and a \"fixtureId\" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId. If \"expression\" is specified and a \"fixtureId\" is not, then the expression will be evaluated against the response body of the last operation. Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.\n\nThe FHIRPath expression can be evaluated as either a path to a specific value or as a boolean expression against the given FHIR resource. When the FHIRPath is a boolean expression, the assert.value element is not used. See [Testing FHIR Use Expressions](testing.html#expressions).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:expression",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:headerField",
        "path": "Extension.extension:headerField",
        "short": "HTTP header field name",
        "definition": "The HTTP header field name e.g. 'Location'.",
        "comment": "If \"headerField\" is specified then \"value\" must be specified.  If \"sourceId\" is not specified, then \"headerField\" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:headerField",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:minimumId",
        "path": "Extension.extension:minimumId",
        "short": "Fixture Id of minimum content resource",
        "definition": "The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.",
        "comment": "Asserts that the response contains all the element/content in another fixture pointed to by minimumId. This can be a statically defined fixture or one that is dynamically set via responseId.\n\nSee [Testing FHIR Use minimumId](testing.html##minimumId) for a more complete description of the test engine's comparison logic.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:minimumId",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:navigationLinks",
        "path": "Extension.extension:navigationLinks",
        "short": "Perform validation on navigation links?",
        "definition": "Whether or not the test execution performs validation on the bundle navigation links.",
        "comment": "Asserts that the Bundle contains first, last, and next links.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:navigationLinks",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:operator",
        "path": "Extension.extension:operator",
        "short": "equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval | manualEval",
        "definition": "The operator type defines the conditional behavior of the assert.",
        "comment": "Operators are useful for both positive and negative testing. If operator is not specified, then the default conditional behavior is implemented as defined in [Testing FHIR Assertions](testing.html#assertion-table).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:operator",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:path",
        "path": "Extension.extension:path",
        "short": "XPath or JSONPath expression",
        "definition": "The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.",
        "comment": "If both \"path\" and a \"fixtureId\" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If \"path\" is specified and a \"fixtureId\" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:path",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:requestMethod",
        "path": "Extension.extension:requestMethod",
        "short": "delete | get | options | patch | post | put | head",
        "definition": "The request method or HTTP operation code to compare against that used by the client system under test.",
        "comment": "If \"requestMethod\" is specified then it will be used in place of \"value\". The \"requestMethod\" will evaluate against the last operation's request HTTP operation.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:requestMethod",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:requestURL",
        "path": "Extension.extension:requestURL",
        "short": "Request URL comparison value",
        "definition": "The value to use in a comparison against the request URL path string.",
        "comment": "If \"requestURL\" is specified then it will be used in place of \"value\". The \"requestURL\" will evaluate against the last operation's full request URL path string.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:requestURL",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:resource",
        "path": "Extension.extension:resource",
        "short": "Resource type",
        "definition": "The type of the resource.  See the [resource list](resourcelist.html).",
        "comment": "This will be expected resource type in response body e.g. in read, vread, search, etc.  See the [Resource List](resourcelist.html) for complete list of resource types; e.g. <assert > <resourceType value=\"Patient\" </assert>.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:resource",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:response",
        "path": "Extension.extension:response",
        "short": "continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported",
        "definition": "This is a shorter way of achieving similar verifications via \"assert.responseCode\".  If you need more control, then use \"assert.responseCode\"  e.g. <assert>  <contentType value=\"json\" />  <response value=\"okay\"/> </assert>.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:response",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:responseCode",
        "path": "Extension.extension:responseCode",
        "short": "HTTP response code to test",
        "definition": "The value of the HTTP response code to be tested.",
        "comment": "To be used with \"operator\" attribute value. Asserts that the response code equals this value if \"operator\" is not specified.   If the operator is \"in\" or \"notIn\" then the responseCode would be a comma-separated list of values e.g. \"200,201\". Otherwise, it's expected to be a numeric value.   If \"fixture\" is not specified, then the \"responseBodyId\" value of the last operation is assumed.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:responseCode",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:sourceId",
        "path": "Extension.extension:sourceId",
        "short": "Fixture Id of source expression or headerField",
        "definition": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against.",
        "comment": "This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:sourceId",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:stopTestOnFail",
        "path": "Extension.extension:stopTestOnFail",
        "short": "If this assert fails, will the current test execution stop?",
        "definition": "Whether or not the current test execution will stop on failure for this assert.",
        "comment": "If this element is specified and it is true, then assertion failures should not stop the current test execution from proceeding.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:stopTestOnFail",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:validateProfileId",
        "path": "Extension.extension:validateProfileId",
        "short": "Profile Id of validation profile reference",
        "definition": "The ID of the Profile to validate against.",
        "comment": "The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:validateProfileId",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:value",
        "path": "Extension.extension:value",
        "short": "The value to compare to",
        "definition": "The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:value",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:warningOnly",
        "path": "Extension.extension:warningOnly",
        "short": "Will this assert produce a warning only on error?",
        "definition": "Whether or not the test execution will produce a warning only on error for this assert.",
        "comment": "If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:warningOnly",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:requirement",
        "path": "Extension.extension:requirement",
        "short": "Links or references to the testing requirements",
        "definition": "Links or references providing traceability to the testing requirements for this assert.",
        "comment": "TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:requirement",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:link[x]",
        "path": "Extension.extension:link[x]",
        "short": "Link or reference to the testing requirement",
        "definition": "Link or reference providing traceability to the testing requirement for this test.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:link[x]",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      }
    ]
  },
  "differential": {
    "element": [
      {
        "path": "Extension",
        "short": "The assertion to perform",
        "definition": "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
        "comment": "R5 `TestScript.setup.action.assert` maps as Equivalent to R4 `TestScript.setup.action.assert`\nIn order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:label",
        "short": "Tracking/logging assertion label",
        "definition": "The label would be used for tracking/logging purposes by test engines.",
        "comment": "This has no impact on the verification itself.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:label.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:label.url",
        "fixedUri": "label"
      },
      {
        "path": "Extension.extension:description",
        "short": "Tracking/reporting assertion description",
        "definition": "The description would be used by test engines for tracking and reporting purposes.",
        "comment": "This has no impact on the verification itself.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:description.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:description.url",
        "fixedUri": "description"
      },
      {
        "path": "Extension.extension:direction",
        "short": "response | request",
        "definition": "The direction to use for the assertion.",
        "comment": "If the direction is specified as \"response\" (the default), then the processing of this assert is against the received response message. If the direction is specified as \"request\", then the processing of this assert is against the sent request message.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:direction.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:direction.url",
        "fixedUri": "direction"
      },
      {
        "path": "Extension.extension:compareToSourceId",
        "short": "Id of the source fixture to be evaluated",
        "definition": "Id of the source fixture used as the contents to be evaluated by either the \"source/expression\" or \"sourceId/path\" definition.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:compareToSourceId.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:compareToSourceId.url",
        "fixedUri": "compareToSourceId"
      },
      {
        "path": "Extension.extension:compareToSourceExpression",
        "short": "The FHIRPath expression to evaluate against the source fixture",
        "definition": "The FHIRPath expression for a specific value to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.",
        "comment": "Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:compareToSourceExpression.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:compareToSourceExpression.url",
        "fixedUri": "compareToSourceExpression"
      },
      {
        "path": "Extension.extension:compareToSourcePath",
        "short": "XPath or JSONPath expression to evaluate against the source fixture",
        "definition": "XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.",
        "comment": "The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:compareToSourcePath.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:compareToSourcePath.url",
        "fixedUri": "compareToSourcePath"
      },
      {
        "path": "Extension.extension:contentType",
        "short": "Mime type to compare against the 'Content-Type' header",
        "definition": "The mime-type contents to compare against the request or response message 'Content-Type' header.",
        "comment": "If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If \"assert.sourceId\" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).  If you'd like to have more control over the string, then use 'assert.headerField' instead.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:contentType.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:contentType.url",
        "fixedUri": "contentType"
      },
      {
        "path": "Extension.extension:defaultManualCompletion",
        "short": "fail | pass | skip | stop",
        "definition": "The default manual completion outcome applied to this assertion.",
        "comment": "Manual completion is used to pause the test engine execution and evaluation allowing an external review of the defined assert condition. The defaultManualCompletion defines the default manual completion outcome applied if one of the enumerated values is not applied.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:defaultManualCompletion.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:defaultManualCompletion.extension:code",
        "sliceName": "code",
        "sliceIsConstraining": true,
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/5.0/StructureDefinition/extension-code"
            ]
          }
        ]
      },
      {
        "path": "Extension.extension:defaultManualCompletion.url",
        "fixedUri": "defaultManualCompletion"
      },
      {
        "path": "Extension.extension:expression",
        "short": "The FHIRPath expression to be evaluated",
        "definition": "The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.",
        "comment": "If both \"expression\" and a \"fixtureId\" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId. If \"expression\" is specified and a \"fixtureId\" is not, then the expression will be evaluated against the response body of the last operation. Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.\n\nThe FHIRPath expression can be evaluated as either a path to a specific value or as a boolean expression against the given FHIR resource. When the FHIRPath is a boolean expression, the assert.value element is not used. See [Testing FHIR Use Expressions](testing.html#expressions).",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:expression.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:expression.url",
        "fixedUri": "expression"
      },
      {
        "path": "Extension.extension:headerField",
        "short": "HTTP header field name",
        "definition": "The HTTP header field name e.g. 'Location'.",
        "comment": "If \"headerField\" is specified then \"value\" must be specified.  If \"sourceId\" is not specified, then \"headerField\" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:headerField.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:headerField.url",
        "fixedUri": "headerField"
      },
      {
        "path": "Extension.extension:minimumId",
        "short": "Fixture Id of minimum content resource",
        "definition": "The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.",
        "comment": "Asserts that the response contains all the element/content in another fixture pointed to by minimumId. This can be a statically defined fixture or one that is dynamically set via responseId.\n\nSee [Testing FHIR Use minimumId](testing.html##minimumId) for a more complete description of the test engine's comparison logic.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:minimumId.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:minimumId.url",
        "fixedUri": "minimumId"
      },
      {
        "path": "Extension.extension:navigationLinks",
        "short": "Perform validation on navigation links?",
        "definition": "Whether or not the test execution performs validation on the bundle navigation links.",
        "comment": "Asserts that the Bundle contains first, last, and next links.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:navigationLinks.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:navigationLinks.url",
        "fixedUri": "navigationLinks"
      },
      {
        "path": "Extension.extension:operator",
        "short": "equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval | manualEval",
        "definition": "The operator type defines the conditional behavior of the assert.",
        "comment": "Operators are useful for both positive and negative testing. If operator is not specified, then the default conditional behavior is implemented as defined in [Testing FHIR Assertions](testing.html#assertion-table).",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:operator.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:operator.url",
        "fixedUri": "operator"
      },
      {
        "path": "Extension.extension:path",
        "short": "XPath or JSONPath expression",
        "definition": "The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.",
        "comment": "If both \"path\" and a \"fixtureId\" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If \"path\" is specified and a \"fixtureId\" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:path.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:path.url",
        "fixedUri": "path"
      },
      {
        "path": "Extension.extension:requestMethod",
        "short": "delete | get | options | patch | post | put | head",
        "definition": "The request method or HTTP operation code to compare against that used by the client system under test.",
        "comment": "If \"requestMethod\" is specified then it will be used in place of \"value\". The \"requestMethod\" will evaluate against the last operation's request HTTP operation.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:requestMethod.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:requestMethod.url",
        "fixedUri": "requestMethod"
      },
      {
        "path": "Extension.extension:requestURL",
        "short": "Request URL comparison value",
        "definition": "The value to use in a comparison against the request URL path string.",
        "comment": "If \"requestURL\" is specified then it will be used in place of \"value\". The \"requestURL\" will evaluate against the last operation's full request URL path string.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:requestURL.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:requestURL.url",
        "fixedUri": "requestURL"
      },
      {
        "path": "Extension.extension:resource",
        "short": "Resource type",
        "definition": "The type of the resource.  See the [resource list](resourcelist.html).",
        "comment": "This will be expected resource type in response body e.g. in read, vread, search, etc.  See the [Resource List](resourcelist.html) for complete list of resource types; e.g. <assert > <resourceType value=\"Patient\" </assert>.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.url",
        "fixedUri": "resource"
      },
      {
        "path": "Extension.extension:response",
        "short": "continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported",
        "definition": "This is a shorter way of achieving similar verifications via \"assert.responseCode\".  If you need more control, then use \"assert.responseCode\"  e.g. <assert>  <contentType value=\"json\" />  <response value=\"okay\"/> </assert>.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:response.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:response.url",
        "fixedUri": "response"
      },
      {
        "path": "Extension.extension:responseCode",
        "short": "HTTP response code to test",
        "definition": "The value of the HTTP response code to be tested.",
        "comment": "To be used with \"operator\" attribute value. Asserts that the response code equals this value if \"operator\" is not specified.   If the operator is \"in\" or \"notIn\" then the responseCode would be a comma-separated list of values e.g. \"200,201\". Otherwise, it's expected to be a numeric value.   If \"fixture\" is not specified, then the \"responseBodyId\" value of the last operation is assumed.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:responseCode.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:responseCode.url",
        "fixedUri": "responseCode"
      },
      {
        "path": "Extension.extension:sourceId",
        "short": "Fixture Id of source expression or headerField",
        "definition": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against.",
        "comment": "This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:sourceId.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:sourceId.url",
        "fixedUri": "sourceId"
      },
      {
        "path": "Extension.extension:stopTestOnFail",
        "short": "If this assert fails, will the current test execution stop?",
        "definition": "Whether or not the current test execution will stop on failure for this assert.",
        "comment": "If this element is specified and it is true, then assertion failures should not stop the current test execution from proceeding.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:stopTestOnFail.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:stopTestOnFail.extension:boolean",
        "sliceName": "boolean",
        "sliceIsConstraining": true,
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/5.0/StructureDefinition/extension-boolean"
            ]
          }
        ]
      },
      {
        "path": "Extension.extension:stopTestOnFail.url",
        "fixedUri": "stopTestOnFail"
      },
      {
        "path": "Extension.extension:validateProfileId",
        "short": "Profile Id of validation profile reference",
        "definition": "The ID of the Profile to validate against.",
        "comment": "The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:validateProfileId.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:validateProfileId.url",
        "fixedUri": "validateProfileId"
      },
      {
        "path": "Extension.extension:value",
        "short": "The value to compare to",
        "definition": "The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:value.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:value.url",
        "fixedUri": "value"
      },
      {
        "path": "Extension.extension:warningOnly",
        "short": "Will this assert produce a warning only on error?",
        "definition": "Whether or not the test execution will produce a warning only on error for this assert.",
        "comment": "If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:warningOnly.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:warningOnly.url",
        "fixedUri": "warningOnly"
      },
      {
        "path": "Extension.extension:requirement",
        "short": "Links or references to the testing requirements",
        "definition": "Links or references providing traceability to the testing requirements for this assert.",
        "comment": "TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:requirement.extension:link[x]",
        "short": "Link or reference to the testing requirement",
        "definition": "Link or reference providing traceability to the testing requirement for this test.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:requirement.extension:link[x].value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:requirement.extension:link[x].extension:uri",
        "sliceName": "uri",
        "sliceIsConstraining": true,
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/5.0/StructureDefinition/extension-uri"
            ]
          }
        ]
      },
      {
        "path": "Extension.extension:requirement.extension:link[x].extension:canonical",
        "sliceName": "canonical",
        "sliceIsConstraining": true,
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/5.0/StructureDefinition/extension-canonical"
            ]
          }
        ]
      },
      {
        "path": "Extension.extension:requirement.extension:link[x].url",
        "fixedUri": "link%5Bx%5D"
      },
      {
        "path": "Extension.extension:requirement.url",
        "fixedUri": "requirement"
      },
      {
        "path": "Extension.extension:link[x]",
        "short": "Link or reference to the testing requirement",
        "definition": "Link or reference providing traceability to the testing requirement for this test.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:link[x].value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:link[x].extension:uri",
        "sliceName": "uri",
        "sliceIsConstraining": true,
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/5.0/StructureDefinition/extension-uri"
            ]
          }
        ]
      },
      {
        "path": "Extension.extension:link[x].extension:canonical",
        "sliceName": "canonical",
        "sliceIsConstraining": true,
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/5.0/StructureDefinition/extension-canonical"
            ]
          }
        ]
      },
      {
        "path": "Extension.extension:link[x].url",
        "fixedUri": "link%5Bx%5D"
      },
      {
        "path": "Extension.url",
        "fixedUri": "http://hl7.org/fhir/5.0/StructureDefinition/extension-TestScript.setup.action.assert"
      }
    ]
  }
}