{
  "resourceType": "StructureDefinition",
  "id": "CapabilityStatement.rest",
  "url": "http://hl7.org/fhir/5.0/StructureDefinition/extension-CapabilityStatement.rest",
  "name": "XVerExtensionCapabilityStatement.rest",
  "title": "Cross-Version Extension for FHIR R5:CapabilityStatement.rest compared to FHIR R4",
  "status": "draft",
  "experimental": true,
  "description": "R5 `CapabilityStatement.rest` maps as Equivalent to R4 `CapabilityStatement.rest`",
  "fhirVersion": "5.0.0",
  "kind": "complex-type",
  "abstract": false,
  "context": [
    {
      "type": "element",
      "expression": "CapabilityStatement.rest"
    }
  ],
  "type": "Extension",
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/Extension",
  "derivation": "constraint",
  "snapshot": {
    "element": [
      {
        "id": "Extension",
        "extension": [
          {
            "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status",
            "valueCode": "normative"
          },
          {
            "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-normative-version",
            "valueCode": "4.0.0"
          }
        ],
        "path": "Extension",
        "short": "If the endpoint is a RESTful one",
        "definition": "A definition of the restful capabilities of the solution, if any.",
        "comment": "R5 `CapabilityStatement.rest` maps as Equivalent to R4 `CapabilityStatement.rest`\nMultiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension",
          "min": 0,
          "max": "*"
        },
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a,N/A"
          }
        ]
      },
      {
        "id": "Extension.id",
        "path": "Extension.id",
        "representation": [
          "xmlAttr"
        ],
        "short": "Unique id for inter-element referencing",
        "definition": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Element.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "id"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "condition": [
          "ele-1"
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "Extension.extension",
        "path": "Extension.extension",
        "slicing": {
          "discriminator": [
            {
              "type": "value",
              "path": "url"
            }
          ],
          "description": "Extensions are always sliced by (at least) url",
          "rules": "open"
        },
        "short": "Additional content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "Element.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "Extension.url",
        "path": "Extension.url",
        "representation": [
          "xmlAttr"
        ],
        "short": "identifies the meaning of the extension",
        "definition": "Source of the definition for the extension code - a logical name or a URL.",
        "comment": "The definition may point directly to a computable or human-readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition SHALL be a URI for the Structure Definition defining the extension.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.url",
          "min": 1,
          "max": "1"
        },
        "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "uri"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "fixedUri": "http://hl7.org/fhir/5.0/StructureDefinition/extension-CapabilityStatement.rest",
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "id": "Extension.value[x]",
        "path": "Extension.value[x]",
        "short": "Value of extension",
        "definition": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.value[x]",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "base64Binary"
          },
          {
            "code": "boolean"
          },
          {
            "code": "canonical"
          },
          {
            "code": "code"
          },
          {
            "code": "date"
          },
          {
            "code": "dateTime"
          },
          {
            "code": "decimal"
          },
          {
            "code": "id"
          },
          {
            "code": "instant"
          },
          {
            "code": "integer"
          },
          {
            "code": "integer64"
          },
          {
            "code": "markdown"
          },
          {
            "code": "oid"
          },
          {
            "code": "positiveInt"
          },
          {
            "code": "string"
          },
          {
            "code": "time"
          },
          {
            "code": "unsignedInt"
          },
          {
            "code": "uri"
          },
          {
            "code": "url"
          },
          {
            "code": "uuid"
          },
          {
            "code": "Address"
          },
          {
            "code": "Age"
          },
          {
            "code": "Annotation"
          },
          {
            "code": "Attachment"
          },
          {
            "code": "CodeableConcept"
          },
          {
            "code": "CodeableReference"
          },
          {
            "code": "Coding"
          },
          {
            "code": "ContactPoint"
          },
          {
            "code": "Count"
          },
          {
            "code": "Distance"
          },
          {
            "code": "Duration"
          },
          {
            "code": "HumanName"
          },
          {
            "code": "Identifier"
          },
          {
            "code": "Money"
          },
          {
            "code": "Period"
          },
          {
            "code": "Quantity"
          },
          {
            "code": "Range"
          },
          {
            "code": "Ratio"
          },
          {
            "code": "RatioRange"
          },
          {
            "code": "Reference"
          },
          {
            "code": "SampledData"
          },
          {
            "code": "Signature"
          },
          {
            "code": "Timing"
          },
          {
            "code": "ContactDetail"
          },
          {
            "code": "DataRequirement"
          },
          {
            "code": "Expression"
          },
          {
            "code": "ParameterDefinition"
          },
          {
            "code": "RelatedArtifact"
          },
          {
            "code": "TriggerDefinition"
          },
          {
            "code": "UsageContext"
          },
          {
            "code": "Availability"
          },
          {
            "code": "ExtendedContactDetail"
          },
          {
            "code": "Dosage"
          },
          {
            "code": "Meta"
          }
        ],
        "condition": [
          "ext-1"
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },
      {
        "id": "Extension.extension:mode",
        "path": "Extension.extension:mode",
        "short": "client | server",
        "definition": "Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:mode",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:documentation",
        "path": "Extension.extension:documentation",
        "short": "General description of implementation",
        "definition": "Information about the system's restful capabilities that apply across all applications, such as security.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:documentation",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:security",
        "path": "Extension.extension:security",
        "short": "Information about security of implementation",
        "definition": "Information about security implementation from an interface perspective - what a client needs to know.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:security",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:cors",
        "path": "Extension.extension:cors",
        "short": "Adds CORS Headers (http://enable-cors.org/)",
        "definition": "Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.",
        "comment": "The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:cors",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:service",
        "path": "Extension.extension:service",
        "short": "OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates",
        "definition": "Types of security services that are supported/required by the system.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:service",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:description",
        "path": "Extension.extension:description",
        "short": "General description of how security works",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:description",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:resource",
        "path": "Extension.extension:resource",
        "short": "Resource served on the REST interface",
        "definition": "A specification of the restful capabilities of the solution for a specific resource type.",
        "comment": "Max of one repetition per resource type.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:resource",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:type",
        "path": "Extension.extension:type",
        "short": "A resource type that is supported",
        "definition": "A type of resource exposed via the restful interface.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:type",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:profile",
        "path": "Extension.extension:profile",
        "short": "System-wide profile",
        "definition": "A system-wide profile that is applied across *all* instances of the resource supported by the system. For example, if declared on Observation, this profile is the \"superset\" of capabilities for laboratory *and* vitals *and* other domains. See further discussion in [Using Profiles](profiling.html#profile-uses).",
        "comment": "All other profiles for this type that are listed in `.rest.resource.supportedProfile` must conform to this profile.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:profile",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:supportedProfile",
        "path": "Extension.extension:supportedProfile",
        "short": "Use-case specific profiles",
        "definition": "A list of profiles representing different use cases the system hosts/produces. A supported profile is a statement about the functionality of the data and services provided by the server (or the client) for supported use cases. For example, a system can define and declare multiple Observation profiles for laboratory observations, vital sign observations, etc. By declaring supported profiles, systems provide a way to determine whether individual resources are conformant. See further discussion in [Using Profiles](profiling.html#profile-uses).",
        "comment": "Supported profiles must conform to the resource profile in the `.rest.resource.profile` element if it is present. The resource profile is a system-wide profile applied across *all* instances of the resource supported by the system. A supported profile is a statement about the functionality of the data and services provided by the server (or used by the client) for a particular set of use cases and will not necessarily apply to all data consumed or exposed by the server.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:supportedProfile",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:documentation",
        "path": "Extension.extension:documentation",
        "short": "Additional information about the use of the resource type",
        "definition": "Additional information about the resource type used by the system.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:documentation",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:interaction",
        "path": "Extension.extension:interaction",
        "short": "What operations are supported?",
        "definition": "Identifies a restful operation supported by the solution.",
        "comment": "In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:interaction",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:code",
        "path": "Extension.extension:code",
        "short": "read | vread | update | patch | delete | history-instance | history-type | create | search-type",
        "definition": "Coded identifier of the operation, supported by the system resource.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:code",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:documentation",
        "path": "Extension.extension:documentation",
        "short": "Anything special about operation behavior",
        "definition": "Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:documentation",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:versioning",
        "path": "Extension.extension:versioning",
        "short": "no-version | versioned | versioned-update",
        "definition": "This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.",
        "comment": "If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:versioning",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:readHistory",
        "path": "Extension.extension:readHistory",
        "short": "Whether vRead can return past versions",
        "definition": "A flag for whether the server is able to return past versions as part of the vRead operation.",
        "comment": "It is useful to support the vRead operation for current operations, even if past versions aren't available.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:readHistory",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:updateCreate",
        "path": "Extension.extension:updateCreate",
        "short": "If update can commit to a new identity",
        "definition": "A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.",
        "comment": "Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:updateCreate",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:conditionalCreate",
        "path": "Extension.extension:conditionalCreate",
        "short": "If allows/uses conditional create",
        "definition": "A flag that indicates that the server supports conditional create.",
        "comment": "Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:conditionalCreate",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:conditionalRead",
        "path": "Extension.extension:conditionalRead",
        "short": "not-supported | modified-since | not-match | full-support",
        "definition": "A code that indicates how the server supports conditional read.",
        "comment": "Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:conditionalRead",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:conditionalUpdate",
        "path": "Extension.extension:conditionalUpdate",
        "short": "If allows/uses conditional update",
        "definition": "A flag that indicates that the server supports conditional update.",
        "comment": "Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:conditionalUpdate",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:conditionalPatch",
        "path": "Extension.extension:conditionalPatch",
        "short": "If allows/uses conditional patch",
        "definition": "A flag that indicates that the server supports conditional patch.",
        "comment": "Conditional Patch is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:conditionalPatch",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:conditionalDelete",
        "path": "Extension.extension:conditionalDelete",
        "short": "not-supported | single | multiple - how conditional delete is supported",
        "definition": "A code that indicates how the server supports conditional delete.",
        "comment": "Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:conditionalDelete",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:referencePolicy",
        "path": "Extension.extension:referencePolicy",
        "short": "literal | logical | resolves | enforced | local",
        "definition": "A set of flags that defines how references are supported.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:referencePolicy",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:searchInclude",
        "path": "Extension.extension:searchInclude",
        "short": "_include values supported by the server",
        "definition": "A list of _include values supported by the server.",
        "comment": "Documenting [`_include`](http://hl7.org/fhir/R5/search.html#revinclude) support helps set conformance expectations for the desired system. Still, it is a level of detail that might not be exposed by production servers or clients when using CapabilityStatement to describe an actual implementation. If this list is empty, the server does not support includes. Support for *iterative* (a.k.a., recursive) `_include` is communicated by listing the iterative includes values supported by the server in the `searchInclude` element of the \"root\" resource type. For example, to support the following search:\n\n`GET [base]/CarePlan?_include=CarePlan:activity-reference:DeviceRequest&_include:iterate=DeviceRequest:device`\n\nThese values would be listed as part of capabilities for \"CarePlan\":\n\n\"searchInclude\" : [\"CarePlan:activity-reference:DeviceRequest\",\"DeviceRequest:device\"],",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:searchInclude",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:searchRevInclude",
        "path": "Extension.extension:searchRevInclude",
        "short": "_revinclude values supported by the server",
        "definition": "A list of _revinclude (reverse include) values supported by the server.",
        "comment": "See `CapabilityStatement.rest.resource.searchInclude` comments.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:searchRevInclude",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:searchParam",
        "path": "Extension.extension:searchParam",
        "short": "Search parameters supported by implementation",
        "definition": "Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.",
        "comment": "The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:searchParam",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:name",
        "path": "Extension.extension:name",
        "short": "Name for parameter in search url",
        "definition": "The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.",
        "comment": "Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined. There is no correspondence whatsoever between CapabilityStatement's searchParam.name and SearchParameter.name - the latter is used as a class name when generating code for the search parameter.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:name",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:definition",
        "path": "Extension.extension:definition",
        "short": "Source of definition for parameter",
        "definition": "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "comment": "This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:definition",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:type",
        "path": "Extension.extension:type",
        "short": "number | date | string | token | reference | composite | quantity | uri | special",
        "definition": "The type of value a search parameter refers to, and how the content is interpreted.",
        "comment": "While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:type",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:documentation",
        "path": "Extension.extension:documentation",
        "short": "Server-specific usage",
        "definition": "This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:documentation",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:operation",
        "path": "Extension.extension:operation",
        "short": "Definition of a resource operation",
        "definition": "Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.",
        "comment": "Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    \n\nIf an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:operation",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:name",
        "path": "Extension.extension:name",
        "short": "Name by which the operation/query is invoked",
        "definition": "The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.",
        "comment": "The name here SHOULD be the same as the OperationDefinition.code in the referenced OperationDefinition, unless there is a name clash and the OperationDefinition.code cannot be used. The name does not include the \"$\" portion that is always included in the URL. There is no correspondence whatsoever between CapabilityStatement's operation.name and OperationDefinition.name - the latter is used as a class name when generating code for the operation. HL7 will never define operations that have conflicting names.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:name",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:definition",
        "path": "Extension.extension:definition",
        "short": "The defined operation/query",
        "definition": "Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.",
        "comment": "This can be used to build an HTML form to invoke the operation, for instance.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:definition",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:documentation",
        "path": "Extension.extension:documentation",
        "short": "Specific details about operation behavior",
        "definition": "Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:documentation",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:interaction",
        "path": "Extension.extension:interaction",
        "short": "What operations are supported?",
        "definition": "A specification of restful operations supported by the system.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:interaction",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:code",
        "path": "Extension.extension:code",
        "short": "transaction | batch | search-system | history-system",
        "definition": "A coded identifier of the operation, supported by the system.",
        "min": 1,
        "max": "1",
        "base": {
          "path": "Extension.extension:code",
          "min": 1,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:documentation",
        "path": "Extension.extension:documentation",
        "short": "Anything special about operation behavior",
        "definition": "Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Extension.extension:documentation",
          "min": 0,
          "max": "1"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:searchParam",
        "path": "Extension.extension:searchParam",
        "short": "Search parameters for searching all resources",
        "definition": "Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. This is only for searches executed against the system-level endpoint.",
        "comment": "Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:searchParam",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:operation",
        "path": "Extension.extension:operation",
        "short": "Definition of a system level operation",
        "definition": "Definition of an operation or a named query together with its parameters and their meaning and type.",
        "comment": "CapabilityStatement.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:operation",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      },
      {
        "id": "Extension.extension:compartment",
        "path": "Extension.extension:compartment",
        "short": "Compartments served/used by system",
        "definition": "An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .",
        "comment": "At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).",
        "min": 0,
        "max": "*",
        "base": {
          "path": "Extension.extension:compartment",
          "min": 0,
          "max": "*"
        },
        "isModifier": false
      }
    ]
  },
  "differential": {
    "element": [
      {
        "path": "Extension",
        "short": "If the endpoint is a RESTful one",
        "definition": "A definition of the restful capabilities of the solution, if any.",
        "comment": "R5 `CapabilityStatement.rest` maps as Equivalent to R4 `CapabilityStatement.rest`\nMultiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:mode",
        "short": "client | server",
        "definition": "Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:mode.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:mode.url",
        "fixedUri": "mode"
      },
      {
        "path": "Extension.extension:documentation",
        "short": "General description of implementation",
        "definition": "Information about the system's restful capabilities that apply across all applications, such as security.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:security",
        "short": "Information about security of implementation",
        "definition": "Information about security implementation from an interface perspective - what a client needs to know.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:security.extension:cors",
        "short": "Adds CORS Headers (http://enable-cors.org/)",
        "definition": "Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.",
        "comment": "The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:security.extension:cors.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:security.extension:cors.url",
        "fixedUri": "cors"
      },
      {
        "path": "Extension.extension:security.extension:service",
        "short": "OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates",
        "definition": "Types of security services that are supported/required by the system.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:security.extension:service.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:security.extension:service.url",
        "fixedUri": "service"
      },
      {
        "path": "Extension.extension:security.extension:description",
        "short": "General description of how security works",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:security.extension:description.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:security.extension:description.url",
        "fixedUri": "description"
      },
      {
        "path": "Extension.extension:security.url",
        "fixedUri": "security"
      },
      {
        "path": "Extension.extension:cors",
        "short": "Adds CORS Headers (http://enable-cors.org/)",
        "definition": "Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.",
        "comment": "The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:cors.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:cors.url",
        "fixedUri": "cors"
      },
      {
        "path": "Extension.extension:service",
        "short": "OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates",
        "definition": "Types of security services that are supported/required by the system.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:service.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:service.url",
        "fixedUri": "service"
      },
      {
        "path": "Extension.extension:description",
        "short": "General description of how security works",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:description.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:description.url",
        "fixedUri": "description"
      },
      {
        "path": "Extension.extension:resource",
        "short": "Resource served on the REST interface",
        "definition": "A specification of the restful capabilities of the solution for a specific resource type.",
        "comment": "Max of one repetition per resource type.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:type",
        "short": "A resource type that is supported",
        "definition": "A type of resource exposed via the restful interface.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:type.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:type.url",
        "fixedUri": "type"
      },
      {
        "path": "Extension.extension:resource.extension:profile",
        "short": "System-wide profile",
        "definition": "A system-wide profile that is applied across *all* instances of the resource supported by the system. For example, if declared on Observation, this profile is the \"superset\" of capabilities for laboratory *and* vitals *and* other domains. See further discussion in [Using Profiles](profiling.html#profile-uses).",
        "comment": "All other profiles for this type that are listed in `.rest.resource.supportedProfile` must conform to this profile.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:profile.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:profile.url",
        "fixedUri": "profile"
      },
      {
        "path": "Extension.extension:resource.extension:supportedProfile",
        "short": "Use-case specific profiles",
        "definition": "A list of profiles representing different use cases the system hosts/produces. A supported profile is a statement about the functionality of the data and services provided by the server (or the client) for supported use cases. For example, a system can define and declare multiple Observation profiles for laboratory observations, vital sign observations, etc. By declaring supported profiles, systems provide a way to determine whether individual resources are conformant. See further discussion in [Using Profiles](profiling.html#profile-uses).",
        "comment": "Supported profiles must conform to the resource profile in the `.rest.resource.profile` element if it is present. The resource profile is a system-wide profile applied across *all* instances of the resource supported by the system. A supported profile is a statement about the functionality of the data and services provided by the server (or used by the client) for a particular set of use cases and will not necessarily apply to all data consumed or exposed by the server.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:supportedProfile.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:supportedProfile.url",
        "fixedUri": "supportedProfile"
      },
      {
        "path": "Extension.extension:resource.extension:documentation",
        "short": "Additional information about the use of the resource type",
        "definition": "Additional information about the resource type used by the system.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:resource.extension:interaction",
        "short": "What operations are supported?",
        "definition": "Identifies a restful operation supported by the solution.",
        "comment": "In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:interaction.extension:code",
        "short": "read | vread | update | patch | delete | history-instance | history-type | create | search-type",
        "definition": "Coded identifier of the operation, supported by the system resource.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:interaction.extension:code.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:interaction.extension:code.url",
        "fixedUri": "code"
      },
      {
        "path": "Extension.extension:resource.extension:interaction.extension:documentation",
        "short": "Anything special about operation behavior",
        "definition": "Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:interaction.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:interaction.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:resource.extension:interaction.url",
        "fixedUri": "interaction"
      },
      {
        "path": "Extension.extension:resource.extension:code",
        "short": "read | vread | update | patch | delete | history-instance | history-type | create | search-type",
        "definition": "Coded identifier of the operation, supported by the system resource.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:code.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:code.url",
        "fixedUri": "code"
      },
      {
        "path": "Extension.extension:resource.extension:documentation",
        "short": "Anything special about operation behavior",
        "definition": "Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:resource.extension:versioning",
        "short": "no-version | versioned | versioned-update",
        "definition": "This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.",
        "comment": "If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:versioning.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:versioning.url",
        "fixedUri": "versioning"
      },
      {
        "path": "Extension.extension:resource.extension:readHistory",
        "short": "Whether vRead can return past versions",
        "definition": "A flag for whether the server is able to return past versions as part of the vRead operation.",
        "comment": "It is useful to support the vRead operation for current operations, even if past versions aren't available.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:readHistory.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:readHistory.url",
        "fixedUri": "readHistory"
      },
      {
        "path": "Extension.extension:resource.extension:updateCreate",
        "short": "If update can commit to a new identity",
        "definition": "A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.",
        "comment": "Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:updateCreate.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:updateCreate.url",
        "fixedUri": "updateCreate"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalCreate",
        "short": "If allows/uses conditional create",
        "definition": "A flag that indicates that the server supports conditional create.",
        "comment": "Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:conditionalCreate.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalCreate.url",
        "fixedUri": "conditionalCreate"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalRead",
        "short": "not-supported | modified-since | not-match | full-support",
        "definition": "A code that indicates how the server supports conditional read.",
        "comment": "Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:conditionalRead.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalRead.url",
        "fixedUri": "conditionalRead"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalUpdate",
        "short": "If allows/uses conditional update",
        "definition": "A flag that indicates that the server supports conditional update.",
        "comment": "Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:conditionalUpdate.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalUpdate.url",
        "fixedUri": "conditionalUpdate"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalPatch",
        "short": "If allows/uses conditional patch",
        "definition": "A flag that indicates that the server supports conditional patch.",
        "comment": "Conditional Patch is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:conditionalPatch.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalPatch.extension:boolean",
        "sliceName": "boolean",
        "sliceIsConstraining": true,
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/5.0/StructureDefinition/extension-boolean"
            ]
          }
        ]
      },
      {
        "path": "Extension.extension:resource.extension:conditionalPatch.url",
        "fixedUri": "conditionalPatch"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalDelete",
        "short": "not-supported | single | multiple - how conditional delete is supported",
        "definition": "A code that indicates how the server supports conditional delete.",
        "comment": "Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:conditionalDelete.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:conditionalDelete.url",
        "fixedUri": "conditionalDelete"
      },
      {
        "path": "Extension.extension:resource.extension:referencePolicy",
        "short": "literal | logical | resolves | enforced | local",
        "definition": "A set of flags that defines how references are supported.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:referencePolicy.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:referencePolicy.url",
        "fixedUri": "referencePolicy"
      },
      {
        "path": "Extension.extension:resource.extension:searchInclude",
        "short": "_include values supported by the server",
        "definition": "A list of _include values supported by the server.",
        "comment": "Documenting [`_include`](http://hl7.org/fhir/R5/search.html#revinclude) support helps set conformance expectations for the desired system. Still, it is a level of detail that might not be exposed by production servers or clients when using CapabilityStatement to describe an actual implementation. If this list is empty, the server does not support includes. Support for *iterative* (a.k.a., recursive) `_include` is communicated by listing the iterative includes values supported by the server in the `searchInclude` element of the \"root\" resource type. For example, to support the following search:\n\n`GET [base]/CarePlan?_include=CarePlan:activity-reference:DeviceRequest&_include:iterate=DeviceRequest:device`\n\nThese values would be listed as part of capabilities for \"CarePlan\":\n\n\"searchInclude\" : [\"CarePlan:activity-reference:DeviceRequest\",\"DeviceRequest:device\"],",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:searchInclude.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:searchInclude.url",
        "fixedUri": "searchInclude"
      },
      {
        "path": "Extension.extension:resource.extension:searchRevInclude",
        "short": "_revinclude values supported by the server",
        "definition": "A list of _revinclude (reverse include) values supported by the server.",
        "comment": "See `CapabilityStatement.rest.resource.searchInclude` comments.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:searchRevInclude.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:searchRevInclude.url",
        "fixedUri": "searchRevInclude"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam",
        "short": "Search parameters supported by implementation",
        "definition": "Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.",
        "comment": "The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:name",
        "short": "Name for parameter in search url",
        "definition": "The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.",
        "comment": "Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined. There is no correspondence whatsoever between CapabilityStatement's searchParam.name and SearchParameter.name - the latter is used as a class name when generating code for the search parameter.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:definition",
        "short": "Source of definition for parameter",
        "definition": "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "comment": "This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:definition.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:definition.url",
        "fixedUri": "definition"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:type",
        "short": "number | date | string | token | reference | composite | quantity | uri | special",
        "definition": "The type of value a search parameter refers to, and how the content is interpreted.",
        "comment": "While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:type.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:type.url",
        "fixedUri": "type"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:documentation",
        "short": "Server-specific usage",
        "definition": "This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:resource.extension:searchParam.url",
        "fixedUri": "searchParam"
      },
      {
        "path": "Extension.extension:resource.extension:name",
        "short": "Name for parameter in search url",
        "definition": "The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.",
        "comment": "Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined. There is no correspondence whatsoever between CapabilityStatement's searchParam.name and SearchParameter.name - the latter is used as a class name when generating code for the search parameter.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:resource.extension:definition",
        "short": "Source of definition for parameter",
        "definition": "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "comment": "This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:definition.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:definition.url",
        "fixedUri": "definition"
      },
      {
        "path": "Extension.extension:resource.extension:type",
        "short": "number | date | string | token | reference | composite | quantity | uri | special",
        "definition": "The type of value a search parameter refers to, and how the content is interpreted.",
        "comment": "While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:type.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:type.url",
        "fixedUri": "type"
      },
      {
        "path": "Extension.extension:resource.extension:documentation",
        "short": "Server-specific usage",
        "definition": "This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:resource.extension:operation",
        "short": "Definition of a resource operation",
        "definition": "Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.",
        "comment": "Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    \n\nIf an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:name",
        "short": "Name by which the operation/query is invoked",
        "definition": "The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.",
        "comment": "The name here SHOULD be the same as the OperationDefinition.code in the referenced OperationDefinition, unless there is a name clash and the OperationDefinition.code cannot be used. The name does not include the \"$\" portion that is always included in the URL. There is no correspondence whatsoever between CapabilityStatement's operation.name and OperationDefinition.name - the latter is used as a class name when generating code for the operation. HL7 will never define operations that have conflicting names.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:definition",
        "short": "The defined operation/query",
        "definition": "Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.",
        "comment": "This can be used to build an HTML form to invoke the operation, for instance.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:definition.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:definition.url",
        "fixedUri": "definition"
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:documentation",
        "short": "Specific details about operation behavior",
        "definition": "Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:operation.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:resource.extension:operation.url",
        "fixedUri": "operation"
      },
      {
        "path": "Extension.extension:resource.extension:name",
        "short": "Name by which the operation/query is invoked",
        "definition": "The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.",
        "comment": "The name here SHOULD be the same as the OperationDefinition.code in the referenced OperationDefinition, unless there is a name clash and the OperationDefinition.code cannot be used. The name does not include the \"$\" portion that is always included in the URL. There is no correspondence whatsoever between CapabilityStatement's operation.name and OperationDefinition.name - the latter is used as a class name when generating code for the operation. HL7 will never define operations that have conflicting names.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:resource.extension:definition",
        "short": "The defined operation/query",
        "definition": "Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.",
        "comment": "This can be used to build an HTML form to invoke the operation, for instance.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:definition.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:definition.url",
        "fixedUri": "definition"
      },
      {
        "path": "Extension.extension:resource.extension:documentation",
        "short": "Specific details about operation behavior",
        "definition": "Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:resource.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:resource.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:resource.url",
        "fixedUri": "resource"
      },
      {
        "path": "Extension.extension:type",
        "short": "A resource type that is supported",
        "definition": "A type of resource exposed via the restful interface.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:type.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:type.url",
        "fixedUri": "type"
      },
      {
        "path": "Extension.extension:profile",
        "short": "System-wide profile",
        "definition": "A system-wide profile that is applied across *all* instances of the resource supported by the system. For example, if declared on Observation, this profile is the \"superset\" of capabilities for laboratory *and* vitals *and* other domains. See further discussion in [Using Profiles](profiling.html#profile-uses).",
        "comment": "All other profiles for this type that are listed in `.rest.resource.supportedProfile` must conform to this profile.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:profile.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:profile.url",
        "fixedUri": "profile"
      },
      {
        "path": "Extension.extension:supportedProfile",
        "short": "Use-case specific profiles",
        "definition": "A list of profiles representing different use cases the system hosts/produces. A supported profile is a statement about the functionality of the data and services provided by the server (or the client) for supported use cases. For example, a system can define and declare multiple Observation profiles for laboratory observations, vital sign observations, etc. By declaring supported profiles, systems provide a way to determine whether individual resources are conformant. See further discussion in [Using Profiles](profiling.html#profile-uses).",
        "comment": "Supported profiles must conform to the resource profile in the `.rest.resource.profile` element if it is present. The resource profile is a system-wide profile applied across *all* instances of the resource supported by the system. A supported profile is a statement about the functionality of the data and services provided by the server (or used by the client) for a particular set of use cases and will not necessarily apply to all data consumed or exposed by the server.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:supportedProfile.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:supportedProfile.url",
        "fixedUri": "supportedProfile"
      },
      {
        "path": "Extension.extension:documentation",
        "short": "Additional information about the use of the resource type",
        "definition": "Additional information about the resource type used by the system.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:interaction",
        "short": "What operations are supported?",
        "definition": "Identifies a restful operation supported by the solution.",
        "comment": "In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:interaction.extension:code",
        "short": "read | vread | update | patch | delete | history-instance | history-type | create | search-type",
        "definition": "Coded identifier of the operation, supported by the system resource.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:interaction.extension:code.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:interaction.extension:code.url",
        "fixedUri": "code"
      },
      {
        "path": "Extension.extension:interaction.extension:documentation",
        "short": "Anything special about operation behavior",
        "definition": "Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:interaction.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:interaction.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:interaction.url",
        "fixedUri": "interaction"
      },
      {
        "path": "Extension.extension:code",
        "short": "read | vread | update | patch | delete | history-instance | history-type | create | search-type",
        "definition": "Coded identifier of the operation, supported by the system resource.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:code.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:code.url",
        "fixedUri": "code"
      },
      {
        "path": "Extension.extension:documentation",
        "short": "Anything special about operation behavior",
        "definition": "Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:versioning",
        "short": "no-version | versioned | versioned-update",
        "definition": "This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.",
        "comment": "If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:versioning.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:versioning.url",
        "fixedUri": "versioning"
      },
      {
        "path": "Extension.extension:readHistory",
        "short": "Whether vRead can return past versions",
        "definition": "A flag for whether the server is able to return past versions as part of the vRead operation.",
        "comment": "It is useful to support the vRead operation for current operations, even if past versions aren't available.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:readHistory.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:readHistory.url",
        "fixedUri": "readHistory"
      },
      {
        "path": "Extension.extension:updateCreate",
        "short": "If update can commit to a new identity",
        "definition": "A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.",
        "comment": "Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:updateCreate.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:updateCreate.url",
        "fixedUri": "updateCreate"
      },
      {
        "path": "Extension.extension:conditionalCreate",
        "short": "If allows/uses conditional create",
        "definition": "A flag that indicates that the server supports conditional create.",
        "comment": "Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:conditionalCreate.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:conditionalCreate.url",
        "fixedUri": "conditionalCreate"
      },
      {
        "path": "Extension.extension:conditionalRead",
        "short": "not-supported | modified-since | not-match | full-support",
        "definition": "A code that indicates how the server supports conditional read.",
        "comment": "Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:conditionalRead.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:conditionalRead.url",
        "fixedUri": "conditionalRead"
      },
      {
        "path": "Extension.extension:conditionalUpdate",
        "short": "If allows/uses conditional update",
        "definition": "A flag that indicates that the server supports conditional update.",
        "comment": "Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:conditionalUpdate.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:conditionalUpdate.url",
        "fixedUri": "conditionalUpdate"
      },
      {
        "path": "Extension.extension:conditionalPatch",
        "short": "If allows/uses conditional patch",
        "definition": "A flag that indicates that the server supports conditional patch.",
        "comment": "Conditional Patch is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:conditionalPatch.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:conditionalPatch.extension:boolean",
        "sliceName": "boolean",
        "sliceIsConstraining": true,
        "type": [
          {
            "code": "Extension",
            "profile": [
              "http://hl7.org/fhir/5.0/StructureDefinition/extension-boolean"
            ]
          }
        ]
      },
      {
        "path": "Extension.extension:conditionalPatch.url",
        "fixedUri": "conditionalPatch"
      },
      {
        "path": "Extension.extension:conditionalDelete",
        "short": "not-supported | single | multiple - how conditional delete is supported",
        "definition": "A code that indicates how the server supports conditional delete.",
        "comment": "Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:conditionalDelete.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:conditionalDelete.url",
        "fixedUri": "conditionalDelete"
      },
      {
        "path": "Extension.extension:referencePolicy",
        "short": "literal | logical | resolves | enforced | local",
        "definition": "A set of flags that defines how references are supported.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:referencePolicy.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:referencePolicy.url",
        "fixedUri": "referencePolicy"
      },
      {
        "path": "Extension.extension:searchInclude",
        "short": "_include values supported by the server",
        "definition": "A list of _include values supported by the server.",
        "comment": "Documenting [`_include`](http://hl7.org/fhir/R5/search.html#revinclude) support helps set conformance expectations for the desired system. Still, it is a level of detail that might not be exposed by production servers or clients when using CapabilityStatement to describe an actual implementation. If this list is empty, the server does not support includes. Support for *iterative* (a.k.a., recursive) `_include` is communicated by listing the iterative includes values supported by the server in the `searchInclude` element of the \"root\" resource type. For example, to support the following search:\n\n`GET [base]/CarePlan?_include=CarePlan:activity-reference:DeviceRequest&_include:iterate=DeviceRequest:device`\n\nThese values would be listed as part of capabilities for \"CarePlan\":\n\n\"searchInclude\" : [\"CarePlan:activity-reference:DeviceRequest\",\"DeviceRequest:device\"],",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:searchInclude.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:searchInclude.url",
        "fixedUri": "searchInclude"
      },
      {
        "path": "Extension.extension:searchRevInclude",
        "short": "_revinclude values supported by the server",
        "definition": "A list of _revinclude (reverse include) values supported by the server.",
        "comment": "See `CapabilityStatement.rest.resource.searchInclude` comments.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:searchRevInclude.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:searchRevInclude.url",
        "fixedUri": "searchRevInclude"
      },
      {
        "path": "Extension.extension:searchParam",
        "short": "Search parameters supported by implementation",
        "definition": "Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.",
        "comment": "The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:searchParam.extension:name",
        "short": "Name for parameter in search url",
        "definition": "The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.",
        "comment": "Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined. There is no correspondence whatsoever between CapabilityStatement's searchParam.name and SearchParameter.name - the latter is used as a class name when generating code for the search parameter.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:searchParam.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:searchParam.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:searchParam.extension:definition",
        "short": "Source of definition for parameter",
        "definition": "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "comment": "This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:searchParam.extension:definition.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:searchParam.extension:definition.url",
        "fixedUri": "definition"
      },
      {
        "path": "Extension.extension:searchParam.extension:type",
        "short": "number | date | string | token | reference | composite | quantity | uri | special",
        "definition": "The type of value a search parameter refers to, and how the content is interpreted.",
        "comment": "While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:searchParam.extension:type.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:searchParam.extension:type.url",
        "fixedUri": "type"
      },
      {
        "path": "Extension.extension:searchParam.extension:documentation",
        "short": "Server-specific usage",
        "definition": "This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:searchParam.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:searchParam.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:searchParam.url",
        "fixedUri": "searchParam"
      },
      {
        "path": "Extension.extension:name",
        "short": "Name for parameter in search url",
        "definition": "The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.",
        "comment": "Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined. There is no correspondence whatsoever between CapabilityStatement's searchParam.name and SearchParameter.name - the latter is used as a class name when generating code for the search parameter.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:definition",
        "short": "Source of definition for parameter",
        "definition": "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "comment": "This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:definition.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:definition.url",
        "fixedUri": "definition"
      },
      {
        "path": "Extension.extension:type",
        "short": "number | date | string | token | reference | composite | quantity | uri | special",
        "definition": "The type of value a search parameter refers to, and how the content is interpreted.",
        "comment": "While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:type.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:type.url",
        "fixedUri": "type"
      },
      {
        "path": "Extension.extension:documentation",
        "short": "Server-specific usage",
        "definition": "This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:operation",
        "short": "Definition of a resource operation",
        "definition": "Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.",
        "comment": "Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    \n\nIf an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:operation.extension:name",
        "short": "Name by which the operation/query is invoked",
        "definition": "The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.",
        "comment": "The name here SHOULD be the same as the OperationDefinition.code in the referenced OperationDefinition, unless there is a name clash and the OperationDefinition.code cannot be used. The name does not include the \"$\" portion that is always included in the URL. There is no correspondence whatsoever between CapabilityStatement's operation.name and OperationDefinition.name - the latter is used as a class name when generating code for the operation. HL7 will never define operations that have conflicting names.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:operation.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:operation.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:operation.extension:definition",
        "short": "The defined operation/query",
        "definition": "Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.",
        "comment": "This can be used to build an HTML form to invoke the operation, for instance.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:operation.extension:definition.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:operation.extension:definition.url",
        "fixedUri": "definition"
      },
      {
        "path": "Extension.extension:operation.extension:documentation",
        "short": "Specific details about operation behavior",
        "definition": "Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:operation.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:operation.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:operation.url",
        "fixedUri": "operation"
      },
      {
        "path": "Extension.extension:name",
        "short": "Name by which the operation/query is invoked",
        "definition": "The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.",
        "comment": "The name here SHOULD be the same as the OperationDefinition.code in the referenced OperationDefinition, unless there is a name clash and the OperationDefinition.code cannot be used. The name does not include the \"$\" portion that is always included in the URL. There is no correspondence whatsoever between CapabilityStatement's operation.name and OperationDefinition.name - the latter is used as a class name when generating code for the operation. HL7 will never define operations that have conflicting names.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:name.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:name.url",
        "fixedUri": "name"
      },
      {
        "path": "Extension.extension:definition",
        "short": "The defined operation/query",
        "definition": "Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.",
        "comment": "This can be used to build an HTML form to invoke the operation, for instance.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:definition.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:definition.url",
        "fixedUri": "definition"
      },
      {
        "path": "Extension.extension:documentation",
        "short": "Specific details about operation behavior",
        "definition": "Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:interaction",
        "short": "What operations are supported?",
        "definition": "A specification of restful operations supported by the system.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:interaction.extension:code",
        "short": "transaction | batch | search-system | history-system",
        "definition": "A coded identifier of the operation, supported by the system.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:interaction.extension:code.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:interaction.extension:code.url",
        "fixedUri": "code"
      },
      {
        "path": "Extension.extension:interaction.extension:documentation",
        "short": "Anything special about operation behavior",
        "definition": "Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:interaction.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:interaction.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:interaction.url",
        "fixedUri": "interaction"
      },
      {
        "path": "Extension.extension:code",
        "short": "transaction | batch | search-system | history-system",
        "definition": "A coded identifier of the operation, supported by the system.",
        "min": 1,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:code.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:code.url",
        "fixedUri": "code"
      },
      {
        "path": "Extension.extension:documentation",
        "short": "Anything special about operation behavior",
        "definition": "Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.",
        "min": 0,
        "max": "1",
        "isModifier": false
      },
      {
        "path": "Extension.extension:documentation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:documentation.url",
        "fixedUri": "documentation"
      },
      {
        "path": "Extension.extension:searchParam",
        "short": "Search parameters for searching all resources",
        "definition": "Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. This is only for searches executed against the system-level endpoint.",
        "comment": "Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:searchParam.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:searchParam.url",
        "fixedUri": "searchParam"
      },
      {
        "path": "Extension.extension:operation",
        "short": "Definition of a system level operation",
        "definition": "Definition of an operation or a named query together with its parameters and their meaning and type.",
        "comment": "CapabilityStatement.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:operation.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:operation.url",
        "fixedUri": "operation"
      },
      {
        "path": "Extension.extension:compartment",
        "short": "Compartments served/used by system",
        "definition": "An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .",
        "comment": "At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).",
        "min": 0,
        "max": "*",
        "isModifier": false
      },
      {
        "path": "Extension.extension:compartment.value[x]",
        "max": "0"
      },
      {
        "path": "Extension.extension:compartment.url",
        "fixedUri": "compartment"
      },
      {
        "path": "Extension.url",
        "fixedUri": "http://hl7.org/fhir/5.0/StructureDefinition/extension-CapabilityStatement.rest"
      }
    ]
  }
}