{
  "resourceType": "ConceptMap",
  "id": "R5-StructureMapTransform-R4-StructureMapTransform",
  "url": "http://hl7.org/fhir/uv/xver/R5-R4/ConceptMap/R5-StructureMapTransform-R4-StructureMapTransform",
  "name": "R5-StructureMapTransform-R4-StructureMapTransform",
  "title": "Concept map to convert a FHIR R5 StructureMapTransform into FHIR R4",
  "sourceScopeCanonical": "http://hl7.org/fhir/ValueSet/map-transform|5.0.0",
  "targetScopeCanonical": "http://hl7.org/fhir/ValueSet/map-transform|4.0.1",
  "group": [
    {
      "source": "http://hl7.org/fhir/map-transform",
      "target": "http://hl7.org/fhir/map-transform",
      "element": [
        {
          "code": "append",
          "display": "append(source...) - source is element or string.",
          "target": [
            {
              "code": "append",
              "display": "append(source...) - source is element or string.",
              "relationship": "equivalent",
              "comment": "R5 \u0060append\u0060 is equivalent to R4 \u0060append\u0060."
            }
          ]
        },
        {
          "code": "c",
          "display": "Create a Coding. Parameters = (system. Code[, display]).",
          "target": [
            {
              "code": "c",
              "display": "Create a Coding. Parameters = (system. Code[, display]).",
              "relationship": "equivalent",
              "comment": "R5 \u0060c\u0060 is equivalent to R4 \u0060c\u0060."
            }
          ]
        },
        {
          "code": "cast",
          "display": "cast(source, type?) - cast (convert) source from one type to another. Target type can be left as implicit if there is one and only one target type known. The default namespace for the type is \u0027FHIR\u0027 (see [FHIRPath type specifiers](http://hl7.org/fhirpath/N1/#is-type-specifier))",
          "target": [
            {
              "code": "cast",
              "display": "cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.",
              "relationship": "equivalent",
              "comment": "R5 \u0060cast\u0060 is equivalent to R4 \u0060cast\u0060."
            }
          ]
        },
        {
          "code": "cc",
          "display": "Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).",
          "target": [
            {
              "code": "cc",
              "display": "Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).",
              "relationship": "equivalent",
              "comment": "R5 \u0060cc\u0060 is equivalent to R4 \u0060cc\u0060."
            }
          ]
        },
        {
          "code": "copy",
          "display": "copy(source).",
          "target": [
            {
              "code": "copy",
              "display": "copy(source).",
              "relationship": "equivalent",
              "comment": "R5 \u0060copy\u0060 is equivalent to R4 \u0060copy\u0060."
            }
          ]
        },
        {
          "code": "cp",
          "display": "Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.",
          "target": [
            {
              "code": "cp",
              "display": "Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.",
              "relationship": "equivalent",
              "comment": "R5 \u0060cp\u0060 is equivalent to R4 \u0060cp\u0060."
            }
          ]
        },
        {
          "code": "create",
          "display": "create(type : string) - type is passed through to the application on the standard API, and must be known by it.",
          "target": [
            {
              "code": "create",
              "display": "create(type : string) - type is passed through to the application on the standard API, and must be known by it.",
              "relationship": "equivalent",
              "comment": "R5 \u0060create\u0060 is equivalent to R4 \u0060create\u0060."
            }
          ]
        },
        {
          "code": "dateOp",
          "display": "Perform a date operation. *Parameters to be documented*.",
          "target": [
            {
              "code": "dateOp",
              "display": "Perform a date operation. *Parameters to be documented*.",
              "relationship": "equivalent",
              "comment": "R5 \u0060dateOp\u0060 is equivalent to R4 \u0060dateOp\u0060."
            }
          ]
        },
        {
          "code": "escape",
          "display": "escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.",
          "target": [
            {
              "code": "escape",
              "display": "escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.",
              "relationship": "equivalent",
              "comment": "R5 \u0060escape\u0060 is equivalent to R4 \u0060escape\u0060."
            }
          ]
        },
        {
          "code": "evaluate",
          "display": "Execute the supplied FHIRPath expression and use the value returned by that.",
          "target": [
            {
              "code": "evaluate",
              "display": "Execute the supplied FHIRPath expression and use the value returned by that.",
              "relationship": "equivalent",
              "comment": "R5 \u0060evaluate\u0060 is equivalent to R4 \u0060evaluate\u0060."
            }
          ]
        },
        {
          "code": "id",
          "display": "Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.",
          "target": [
            {
              "code": "id",
              "display": "Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.",
              "relationship": "equivalent",
              "comment": "R5 \u0060id\u0060 is equivalent to R4 \u0060id\u0060."
            }
          ]
        },
        {
          "code": "pointer",
          "display": "Return the appropriate string to put in a reference that refers to the resource provided as a parameter.",
          "target": [
            {
              "code": "pointer",
              "display": "Return the appropriate string to put in a reference that refers to the resource provided as a parameter.",
              "relationship": "equivalent",
              "comment": "R5 \u0060pointer\u0060 is equivalent to R4 \u0060pointer\u0060."
            }
          ]
        },
        {
          "code": "qty",
          "display": "Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.",
          "target": [
            {
              "code": "qty",
              "display": "Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.",
              "relationship": "equivalent",
              "comment": "R5 \u0060qty\u0060 is equivalent to R4 \u0060qty\u0060."
            }
          ]
        },
        {
          "code": "reference",
          "display": "reference(source : object) - return a string that references the provided tree properly.",
          "target": [
            {
              "code": "reference",
              "display": "reference(source : object) - return a string that references the provided tree properly.",
              "relationship": "equivalent",
              "comment": "R5 \u0060reference\u0060 is equivalent to R4 \u0060reference\u0060."
            }
          ]
        },
        {
          "code": "translate",
          "display": "translate(source, uri_of_map) - use the translate operation.",
          "target": [
            {
              "code": "translate",
              "display": "translate(source, uri_of_map) - use the translate operation.",
              "relationship": "equivalent",
              "comment": "R5 \u0060translate\u0060 is equivalent to R4 \u0060translate\u0060."
            }
          ]
        },
        {
          "code": "truncate",
          "display": "truncate(source, length) - source must be stringy type.",
          "target": [
            {
              "code": "truncate",
              "display": "truncate(source, length) - source must be stringy type.",
              "relationship": "equivalent",
              "comment": "R5 \u0060truncate\u0060 is equivalent to R4 \u0060truncate\u0060."
            }
          ]
        },
        {
          "code": "uuid",
          "display": "Generate a random UUID (in lowercase). No Parameters.",
          "target": [
            {
              "code": "uuid",
              "display": "Generate a random UUID (in lowercase). No Parameters.",
              "relationship": "equivalent",
              "comment": "R5 \u0060uuid\u0060 is equivalent to R4 \u0060uuid\u0060."
            }
          ]
        }
      ]
    }
  ]
}